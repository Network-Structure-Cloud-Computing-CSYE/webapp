name: Packer Build

 
on:
  push:
    branches: [ main ]


jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: ${{secrets.DB_DATABASE}}
      DB_HOST: ${{secrets.DB_HOST}}
      DB_PASS: ${{secrets.DB_PASS}}
      DB_USER: ${{secrets.DB_USER}}
      DB_NAME: ${{secrets.DB_NAME}}
      DB_DIALECT: ${{secrets.DB_DIALECT}}
      DB_POOL_MIN: ${{secrets.DB_POOL_MIN}}
      DB_POOL_MAX: ${{secrets.DB_POOL_MAX}}
      DB_POOL_ACQUIRE: ${{secrets.DB_POOL_ACQUIRE}}
      DB_POOL_IDLE: ${{secrets.DB_POOL_IDLE}}
      PORT: ${{secrets.PORT}}
      USERS_CSV_PATH: ${{secrets.USERS_CSV_PATH}}
      SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      DEFAULT_SUBNET_ID: ${{ secrets.DEFAULT_SUBNET_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_AMI_USERS: ${{ secrets.AWS_AMI_USERS }}
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - run: npm i    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

 
    - name: Start MySql Server
      run: sudo systemctl start mysql

 
    - name: Create database in the MySql server
      run: sudo mysql --user=$DB_USER --password=$DB_PASS -e "create database $DB_DATABASE";

    - run: npm test

    - name: Zip Git Repository
      uses: montudor/action-zip@v1
      with:
        args: zip -r webapp.zip .

    - name: Setup `packer`
      uses: hashicorp/setup-packer@main

    - name: Check version of packer
      run: packer -v

    - name: Add required plugins
      run: packer init packer/test.pkr.hcl

    - name: format packer content
      run: packer fmt packer/test.pkr.hcl

    - name: validate packer
      run: packer validate packer/test.pkr.hcl

    - name: packer build
      run: |
        packer build -var "aws_region=$AWS_DEFAULT_REGION" \
        -var "ssh_username=$SSH_USERNAME" \
        -var "ami_users=$AWS_AMI_USERS" packer/test.pkr.hcl

      
    - name: Reconfigure AWS Credentials for demo acc
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_DEMO_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_DEMO_SECRET_ACCESS_KEY}}
        aws-region: ${{vars.AWS_REGION}}
  
    - name: Get latest AMI from "dev", update Launch Template, and refresh asg
      id: get-latest-ami
      run: |
        latest_ami=$(aws ec2 describe-images \
                        --owners ${{secrets.AWS_DEV_USER_ID}} \
                        --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
                        --region ${{vars.AWS_REGION}})
        echo "Latest AMI ID: $latest_ami"
      
        # Get the latest Launch Template ID
        latest_launch_template=$(aws ec2 describe-launch-templates \
                        --filters "Name=launch-template-name,Values=Webapp_Launch_Template-*" \
                        --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' \
                        --region ${{vars.AWS_REGION}})
        echo "Latest Launch Template ID: $latest_launch_template"
      
        # Extracting Launch Template ID without quotes
        latest_launch_template=$(echo $latest_launch_template | tr -d '"')
        echo "Latest Launch Template ID without quotes: $latest_launch_template"
      
        # Get the latest Launch Template version before updation
        latest_version=$(aws ec2 describe-launch-template-versions \
                        --launch-template-id $latest_launch_template \
                        --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' \
                        --region ${{vars.AWS_REGION}})
        echo "Latest Launch Template Version before updation: $latest_version"
      
        # Create a new Launch Template version with the updated AMI ID
        aws ec2 create-launch-template-version \
                        --launch-template-id $latest_launch_template \
                        --launch-template-data "{\"ImageId\":$latest_ami}" \
                        --source-version $latest_version \
                        --region ${{vars.AWS_REGION}}
                      
        # Get the latest Launch Template version after updation
        latest_version=$(aws ec2 describe-launch-template-versions \
                        --launch-template-id $latest_launch_template \
                        --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' \
                        --region ${{vars.AWS_REGION}})
        echo "Latest Launch Template Version after updation: $latest_version"
      
        desired_config="{
            \"LaunchTemplate\": {
          \"LaunchTemplateId\": \"$latest_launch_template\",
          \"Version\": \"$latest_version\"
          }
        }"
        echo "Desired launch temp config : $desired_config"
      
        # Get the latest Auto Scaling Group name matching the pattern
        autoscaling_group_name=$(aws autoscaling describe-auto-scaling-groups \
                            --query "AutoScalingGroups[?contains(AutoScalingGroupName, 'autoscaling-group-')].{Name: AutoScalingGroupName} | sort_by(@, &Name)[-1].Name" \
                            --region ${{vars.AWS_REGION}})
        echo "Latest Auto Scaling Group Name: $autoscaling_group_name"
      
        # Extracting autoscaling_group_name without quotes
        autoscaling_group_name=$(echo "$autoscaling_group_name" | tr -d '"')
        echo "Latest Auto Scaling Group Name without quotes: $autoscaling_group_name"
      
        # Trigger instance refresh and capture the ID
        refresh_id=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $autoscaling_group_name --desired-configuration "$desired_config" --query 'InstanceRefreshId' --output text)
      
        # Loop to check instance refresh status
        while true; do
            status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $autoscaling_group_name --instance-refresh-ids $refresh_id --query 'InstanceRefreshes[0].Status' --output text)
            echo "Instance Refresh Status: $status"
            if [[ "$status" == "Successful" ]]; then
                break
            elif [[ "$status" == "Failed" ]]; then
                echo "Instance refresh failed."
                exit 1  # Exit with error code
            else
                sleep 30
            fi
        done
 









# name: Packer Build

 
# on:
#   pull_request:
#     types: [closed]
#     branches:
#        - main

 

# env:
#   DB_DATABASE: ${{secrets.DB_DATABASE}}
#   DB_HOST: ${{secrets.DB_HOST}}
#   DB_PASS: ${{secrets.DB_PASS}}
#   DB_USER: ${{secrets.DB_USER}}
#   DB_NAME: ${{secrets.DB_NAME}}
#   DB_DIALECT: ${{secrets.DB_DIALECT}}
#   DB_POOL_MIN: ${{secrets.DB_POOL_MIN}}
#   DB_POOL_MAX: ${{secrets.DB_POOL_MAX}}
#   DB_POOL_ACQUIRE: ${{secrets.DB_POOL_ACQUIRE}}
#   DB_POOL_IDLE: ${{secrets.DB_POOL_IDLE}}
#   PORT: ${{secrets.PORT}}
#   USERS_CSV_PATH: ${{secrets.USERS_CSV_PATH}}
#   SOURCE_AMI: ${{ secrets.SOURCE_AMI }}
#   SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
#   DEFAULT_SUBNET_ID: ${{ secrets.DEFAULT_SUBNET_ID }}
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#   AWS_AMI_USERS: ${{ secrets.AWS_AMI_USERS }}

 

# jobs:
#   merge:
#     if: github.event.pull_request.merged
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Git Repository
#         uses: actions/checkout@v2

#       - name: Zip Git Repository
#         uses: montudor/action-zip@v1
#         with:
#           args: zip -r webapp.zip .


#       - name: Packer build
#         id: packer_build
#         uses: hashicorp/packer-github-actions@master
#         with:
#           command: build
#           target: ./packer/ami.pkr.hcl
#           working_directory: .